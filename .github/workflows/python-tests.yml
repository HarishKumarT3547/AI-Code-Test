name: Python Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required for diff coverage

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pylint black diff-cover

      - name: Lint with pylint
        run: |
          pylint src/ --output-format=json || true

      - name: Check formatting with black
        run: |
          black --check src/ || true

      - name: Run tests with pytest and generate coverage report
        run: |
          python -m pytest src/ --cov=src --cov-report=xml --cov-report=term-missing --cov-report=html

      - name: Check diff coverage
        run: |
          # Get the base branch for comparison
          BASE_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [[ "$BASE_BRANCH" == "HEAD" ]]; then
            BASE_BRANCH="main"
          fi

          # Run diff coverage
          diff-cover coverage.xml --compare-branch=origin/$BASE_BRANCH --html-report report.html

          # Extract uncovered lines
          UNCOVERED_LINES=$(diff-cover coverage.xml --compare-branch=origin/$BASE_BRANCH --json-report report.json)

          # Save uncovered lines to a file
          echo "$UNCOVERED_LINES" > uncovered_lines.txt

      - name: Generate test suggestions
        id: generate_tests
        run: |
          # Read uncovered lines
          UNCOVERED=$(cat uncovered_lines.txt)

          if [ -n "$UNCOVERED" ]; then
            # Generate test suggestions
            echo "## Missing Test Coverage" > test_suggestions.md
            echo "The following lines need test coverage:" >> test_suggestions.md
            echo "" >> test_suggestions.md
            echo "$UNCOVERED" >> test_suggestions.md
            echo "" >> test_suggestions.md
            echo "Suggested tests to add:" >> test_suggestions.md
            
            # Generate test code for each uncovered line
            while IFS= read -r line; do
              if [[ $line == *"src/"* ]]; then
                FILE=$(echo $line | cut -d':' -f1)
                LINE=$(echo $line | cut -d':' -f2)
                echo "### $FILE:$LINE" >> test_suggestions.md
                echo '```python' >> test_suggestions.md
                echo "# TODO: Add test for this line" >> test_suggestions.md
                echo "def test_$(basename $FILE .py)_line_$LINE():" >> test_suggestions.md
                echo "    # Add test implementation here" >> test_suggestions.md
                echo '```' >> test_suggestions.md
                echo "" >> test_suggestions.md
              fi
            done <<< "$UNCOVERED"
          fi

      - name: Create or update PR comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            try {
              if (fs.existsSync('test_suggestions.md')) {
                const suggestions = fs.readFileSync('test_suggestions.md', 'utf8');
                
                // Get existing comments
                const { data: comments } = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number
                });
                
                // Find our previous comment
                const previousComment = comments.find(comment => 
                  comment.user.login === 'github-actions[bot]' &&
                  comment.body.includes('Missing Test Coverage')
                );
                
                if (previousComment) {
                  // Update existing comment
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: previousComment.id,
                    body: suggestions
                  });
                } else {
                  // Create new comment
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    body: suggestions
                  });
                }
              }
            } catch (error) {
              console.error('Error creating/updating comment:', error);
            }

      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/
            report.html
          retention-days: 5
