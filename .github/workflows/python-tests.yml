name: Python Tests

on:
  pull_request:
    branches: [main, master]

# Add permissions block
permissions:
  pull-requests: write
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required for diff coverage

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pylint black diff-cover

      - name: Lint with pylint
        run: |
          pylint src/ --output-format=json || true

      - name: Check formatting with black
        run: |
          black --check src/ || true

      - name: Run tests with pytest
        run: |
          python -m pytest src/ --cov=src --cov-report=xml --cov-report=term-missing --cov-report=html

      - name: Check diff coverage
        run: |
          # Fetch the base branch
          git fetch origin ${{ github.base_ref }}

          # Run diff coverage against the base branch
          diff-cover coverage.xml --compare-branch=origin/${{ github.base_ref }} --html-report report.html

          # Extract uncovered lines
          UNCOVERED_LINES=$(diff-cover coverage.xml --compare-branch=origin/${{ github.base_ref }} --json-report report.json)

          # Save uncovered lines to a file
          echo "$UNCOVERED_LINES" > uncovered_lines.txt

          # Generate the comment body with specific test suggestions
          echo "## Missing Test Coverage Analysis" > comment_body.md
          echo "### Coverage Summary" >> comment_body.md
          echo "$UNCOVERED_LINES" | grep "Total:" -A 3 >> comment_body.md
          echo "" >> comment_body.md

          echo "### Detailed Test Suggestions" >> comment_body.md

          # Process each file's uncovered lines
          while IFS= read -r line; do
            if [[ $line == *"src/"* ]]; then
              FILE=$(echo $line | cut -d':' -f1)
              LINES=$(echo $line | cut -d':' -f2-)
              
              echo "#### $FILE" >> comment_body.md
              echo "Uncovered lines: $LINES" >> comment_body.md
              echo "" >> comment_body.md
              
              # Generate test suggestions based on line numbers
              echo "**Suggested Test Cases:**" >> comment_body.md
              echo '```python' >> comment_body.md
              echo "def test_$(basename $FILE .py)_coverage():" >> comment_body.md
              echo "    # Test setup" >> comment_body.md
              echo "    test_data = {" >> comment_body.md
              
              # Add test data based on line numbers
              if [[ "$LINES" == *"90-95"* ]]; then
                echo "        # Test data for lines 90-95" >> comment_body.md
                echo "        'null_input': None," >> comment_body.md
                echo "        'valid_input': {'key': 'value'}," >> comment_body.md
              fi
              
              if [[ "$LINES" == *"111"* || "$LINES" == *"116"* ]]; then
                echo "        # Test data for lines 111,116" >> comment_body.md
                echo "        'empty_list': []," >> comment_body.md
                echo "        'single_item': [1]," >> comment_body.md
                echo "        'multiple_items': [1, 2, 3]," >> comment_body.md
              fi
              
              if [[ "$LINES" == *"119"* || "$LINES" == *"127-128"* ]]; then
                echo "        # Test data for lines 119,127-128" >> comment_body.md
                echo "        'valid_input': 'valid'," >> comment_body.md
                echo "        'invalid_input': None," >> comment_body.md
              fi
              
              echo "    }" >> comment_body.md
              echo "" >> comment_body.md
              echo "    # Test cases" >> comment_body.md
              echo "    for scenario, data in test_data.items():" >> comment_body.md
              echo "        with pytest.subTest(scenario=scenario):" >> comment_body.md
              echo "            result = function_to_test(data)" >> comment_body.md
              echo "            assert result is not None" >> comment_body.md
              echo '```' >> comment_body.md
              echo "" >> comment_body.md

              # Create test file for uncovered lines
              TEST_FILE="src/test_$(basename $FILE .py)_coverage.py"
              echo "import pytest" > "$TEST_FILE"
              echo "from $(basename $FILE .py) import *" >> "$TEST_FILE"
              echo "" >> "$TEST_FILE"
              echo "def test_$(basename $FILE .py)_coverage():" >> "$TEST_FILE"
              echo "    # Test setup" >> "$TEST_FILE"
              echo "    test_data = {" >> "$TEST_FILE"
              
              # Add test data based on line numbers
              if [[ "$LINES" == *"90-95"* ]]; then
                echo "        # Test data for lines 90-95" >> "$TEST_FILE"
                echo "        'null_input': None," >> "$TEST_FILE"
                echo "        'valid_input': {'key': 'value'}," >> "$TEST_FILE"
              fi
              
              if [[ "$LINES" == *"111"* || "$LINES" == *"116"* ]]; then
                echo "        # Test data for lines 111,116" >> "$TEST_FILE"
                echo "        'empty_list': []," >> "$TEST_FILE"
                echo "        'single_item': [1]," >> "$TEST_FILE"
                echo "        'multiple_items': [1, 2, 3]," >> "$TEST_FILE"
              fi
              
              if [[ "$LINES" == *"119"* || "$LINES" == *"127-128"* ]]; then
                echo "        # Test data for lines 119,127-128" >> "$TEST_FILE"
                echo "        'valid_input': 'valid'," >> "$TEST_FILE"
                echo "        'invalid_input': None," >> "$TEST_FILE"
              fi
              
              echo "    }" >> "$TEST_FILE"
              echo "" >> "$TEST_FILE"
              echo "    # Test cases" >> "$TEST_FILE"
              echo "    for scenario, data in test_data.items():" >> "$TEST_FILE"
              echo "        with pytest.subTest(scenario=scenario):" >> "$TEST_FILE"
              echo "            result = function_to_test(data)" >> "$TEST_FILE"
              echo "            assert result is not None" >> "$TEST_FILE"
            fi
          done <<< "$UNCOVERED_LINES"

      - name: Create PR comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            try {
              const commentBody = fs.readFileSync('comment_body.md', 'utf8');
              
              // Create a new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            } catch (error) {
              console.error('Error creating comment:', error);
              process.exit(0);
            }

      - name: Commit test files
        if: always()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add src/test_*_coverage.py
          git commit -m "Add test coverage for uncovered lines" || true
          git push || true

      - name: Upload coverage to Codecov
        if: always() # Run this step even if previous steps fail
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false # Don't fail the workflow if upload fails
          token: ${{ secrets.CODECOV_TOKEN }} # Use repository token if available
          flags: unittests # Add a flag to identify these coverage reports
          name: codecov-umbrella # Give the upload a name
          verbose: true # Get more detailed logs

      - name: Upload coverage report as artifact
        if: always() # Run this step even if previous steps fail
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/
            report.html
          retention-days: 5
